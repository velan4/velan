def tsp_bottom_up(graph, start):
    n = len(graph)
    all_points = set(range(n))
    dp = [[None] * n for _ in range(1 << n)]
    
    for i in range(n):
        dp[1 << i][i] = graph[start][i]

    for mask in range(1 << n):
        for last in range(n):
            if dp[mask][last] is not None:
                for city in range(n):
                    if (mask & (1 << city)) == 0:
                        new_mask = mask | (1 << city)
                        if dp[new_mask][city] is None or dp[new_mask][city] > dp[mask][last] + graph[last][city]:
                            dp[new_mask][city] = dp[mask][last] + graph[last][city]

    return min(dp[2**n - 1])
graph = [
    [0, 10, 15, 20],
    [10, 0, 35, 25],
    [15, 35, 0, 30],
    [20, 25, 30, 0]
]
start_city = 0
shortest_path = tsp_bottom_up(graph, start_city)
print(f"Shortest Path Distance: {shortest_path}")
